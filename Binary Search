import java.util.*;

class Solution {
    // Binary search function
    public int binarysearch(int[] arr, int k) {
        int low = 0;                // Start index
        int high = arr.length - 1;  // End index

        while (low <= high) {
            int mid = low + (high - low) / 2; // Prevent overflow

            // Check if the mid element is the target
            if (arr[mid] == k) {
                return mid; // Return index if found
            }
            // If target is smaller, search in the left half
            else if (arr[mid] > k) {
                high = mid - 1;
            }
            // If target is larger, search in the right half
            else {
                low = mid + 1;
            }
        }

        // If not found, return -1
        return -1;
    }
}

// Driver class to test the solution
public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example test case
        int[] arr = {1, 2, 3, 4, 5};
        int k = 3;
        System.out.println("Index of " + k + ": " + solution.binarysearch(arr, k)); // Output: 2

        // Additional test cases
        int[] arr2 = {10, 20, 30, 40, 50};
        int k2 = 25;
        System.out.println("Index of " + k2 + ": " + solution.binarysearch(arr2, k2)); // Output: -1

        int[] arr3 = {1, 5, 8, 12, 20};
        int k3 = 12;
        System.out.println("Index of " + k3 + ": " + solution.binarysearch(arr3, k3)); // Output: 3

        int[] arr4 = {2, 4, 6, 8, 10, 12};
        int k4 = 7;
        System.out.println("Index of " + k4 + ": " + solution.binarysearch(arr4, k4)); // Output: -1
    }
}
